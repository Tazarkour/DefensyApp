# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
pool:
    vmImage: ubuntu-latest

stages:
- stage: Build_Project

  jobs:

    - job: run_build
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(PYTHON_VERSION)'
          architecture: 'x64'

      - task: PythonScript@0
        displayName: 'Export project path'
        inputs:
          scriptSource: 'inline'
          script: |
            """Search all subdirectories for `manage.py`."""
            from glob import iglob
            from os import path
            # Python >= 3.5
            manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
            if not manage_py:
                raise SystemExit('Could not find a Django project')
            project_location = path.dirname(path.abspath(manage_py))
            print('Found Django project in', project_location)
            print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
      - script: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install unittest-xml-reporting
        displayName: 'Install prerequisites'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Pipeline.Workspace)'
          ArtifactName: 'Release'
          publishLocation: 'Container'
        
- stage: Test
  pool:
    vmImage: ubuntu-latest
  jobs:
    - job: Mend_Bolt_Dependency_Check
      steps:
      - task: WhiteSource@21
        inputs:
          cwd: '$(System.DefaultWorkingDirectory)'
          projectName: 'DefensyApp'
    - job: Bandit_Check
      steps:
      - script: |
          pip install bandit 
          bandit -r . -ll -s B605 -f xml -o ./TEST-Bandit.xml
          bandit -r . -ll -f html -s B605 -o '$(Build.ArtifactStagingDirectory)'/TEST-Bandit.html
        displayName: 'Bandit test'
      
- stage: Pre_Production
  jobs:
  #- deployment: DeployWeb
   # displayName: deploy Web App
    #pool:
      #vmImage: 'Ubuntu-latest'
    # creates an environment if it doesn't exist
    #environment: 
     # name: 'Pre-Production Deployement'
      #resourceName: Dlab-Intern8
      #resourceType: virtualMachine
    #strategy:
     # runOnce:
      #  deploy:
       #   steps:
       #   - script: docker run -d -p 8080:8080 defensylab_app; 
  - job: OWASP_ZAP_Scan_Scan
    #dependsOn: DeployWeb
    steps : 
    - task: Bash@3
      displayName: remove_useless_files
      inputs:
        targetType: 'inline'
        script: |
          rm -rf .git;
          rm .pre-commit-config.yaml;
          rm .safety-policy.yml;
          rm azure-pipelines.yml;
    - task: Bash@3
      displayName: build_and_run_app
      inputs:
        targetType: 'inline'
        script: |
          docker build -t defensyapp:latest . ;
          docker run -d -p 8080:8080 defensyapp:latest;
    - task: Bash@3
      displayName: Run_OWASP_ZAP
      inputs:
        targetType: 'inline'
        script: |
          chmod -R 777 ./
          docker run --rm \
            -v $(pwd):/zap/wrk/:rw \
            -t softwaresecurityproject/zap-stable \
            zap-full-scan.py \
            -t http://127.0.0.1:8080 \
            -g gen.conf \
            -x OWASP-ZAP-Report.xml \
            -r scan-report.html
          
          true
    - task: Bash@3
      displayName: Kill_Containers
      inputs:
        targetType: 'inline'
        script: 'docker stop $(docker ps -q --filter ancestor=DefensyApp);'
    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: '$(Pipeline.Workspace)'
          ArtifactName: 'Release'
          publishLocation: 'Container'

- stage: Production
  jobs:
  - deployment: DeployWeb
    displayName: deploy Web App
    pool:
      vmImage: 'Ubuntu-latest'
    # creates an environment if it doesn't exist
    environment: 
      name: 'Deployement'
      resourceName: Dlab-Intern8
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: docker run -d -p 8080:8080 defensylab_app; 
  #  - task: SSH@0
    #  displayName: Kill_Containers
    #  inputs:
      #  sshEndpoint: 'Connection_SSH_Deployement_Manager'
      #  runOptions: 'commands'
       # commands: 'docker stop $(docker ps -q --filter ancestor=defensylab_app)'
       # readyTimeout: '20000'
      #condition: always()
      
  